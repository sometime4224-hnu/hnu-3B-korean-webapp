<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>한국어 심화 학습</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Noto Sans KR', sans-serif;
        }
        .draggable {
            cursor: grab;
            user-select: none;
            transition: transform 0.2s, box-shadow 0.2s, background-color 0.2s;
        }
        .dragging {
            opacity: 0.5;
            border: 2px dashed #cbd5e0;
        }
        .drop-zone {
            transition: background-color 0.3s, border-color 0.3s;
            min-width: 80px;
            min-height: 44px;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            vertical-align: middle;
            padding: 4px 8px;
        }
        .drop-hover {
            background-color: #e2e8f0;
            border-color: #4299e1;
        }
        .drop-zone-incorrect {
            background-color: #fee2e2 !important;
            border-color: #f87171 !important;
        }
        .vocab-feedback {
            display: none;
            color: #991b1b;
            font-size: 0.9rem;
            font-weight: 500;
            text-align: center;
            width: 100%;
            margin-top: 4px;
        }
        .vocab-feedback.visible {
            display: block;
        }
        @keyframes pulse-blue {
            0% { box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.7); }
            70% { box-shadow: 0 0 0 10px rgba(59, 130, 246, 0); }
            100% { box-shadow: 0 0 0 0 rgba(59, 130, 246, 0); }
        }
        .selected {
            border-color: #3b82f6;
            background-color: #eff6ff;
            transform: translateY(-2px);
            animation: pulse-blue 2s infinite;
        }
        .grammar-option {
            cursor: pointer;
            background-color: #f0f9ff;
            color: #0c4a6e;
            padding: 4px 8px;
            border-radius: 6px;
            border: 1px solid #7dd3fc;
            transition: all 0.2s ease;
        }
        .grammar-option:hover {
            background-color: #e0f2fe;
            border-color: #0ea5e9;
        }
        .grammar-correct {
            background-color: #dcfce7 !important;
            color: #166534 !important;
            border-color: #4ade80 !important;
            font-weight: bold;
        }
        .grammar-incorrect {
            background-color: #fee2e2 !important;
            color: #991b1b !important;
            border-color: #f87171 !important;
        }
        .feedback {
            display: none;
            margin-top: 8px;
            padding: 10px;
            border-radius: 8px;
            background-color: #f3f4f6;
            border-left-width: 4px;
            transition: all 0.2s;
        }
        .feedback.visible {
            display: block;
        }
    </style>
</head>
<body class="bg-gray-100">

    <div id="app" class="w-full max-w-4xl mx-auto p-4">
        <!-- 어휘 확인 2 -->
        <div class="bg-white rounded-2xl shadow-xl p-6 md:p-8 mb-8">
            <div class="text-center mb-8">
                <h1 class="text-3xl font-bold text-gray-800">어휘 확인 2</h1>
                <p class="text-gray-500 mt-2">빈칸에 공통으로 들어갈 단어를 보기에서 찾아 문장을 완성하세요.</p>
            </div>
            <div id="vocab-questions-container" class="space-y-8">
                <!-- Vocabulary questions will be inserted here -->
            </div>
        </div>

        <!-- 문법 확인 2 -->
        <div class="bg-white rounded-2xl shadow-xl p-6 md:p-8">
            <div class="text-center mb-8">
                <h1 class="text-3xl font-bold text-gray-800">문법 확인 2</h1>
                <p class="text-gray-500 mt-2">문장에서 틀린 부분을 찾아 클릭해 보세요.</p>
            </div>
            <div id="grammar-questions-container" class="space-y-6">
                <!-- Grammar questions will be inserted here -->
            </div>
        </div>
    </div>
    
    <!-- 어휘 보기 (Word Bank) -->
    <div id="word-bank" class="fixed bottom-0 left-0 w-full z-50 bg-white p-4 border-t border-gray-200 shadow-[0_-2px_10px_rgba(0,0,0,0.05)] flex flex-wrap justify-center items-center gap-3">
        <!-- Draggable words will be inserted here -->
    </div>

    <script type="module">
        // --- 어휘 문제 데이터 및 로직 ---
        const allVocabWords = ['끼다', '생기다', '빠지다'];
        const allVocabQuestions = [
            {
                id: 1, baseWord: '끼다',
                sentences: [
                    { prefix: '가) 저는 팔짱을', suffix: '는 습관 때문에 어렸을 때 주위 어른들에게 버릇이 없다는 말을 자주 들었어요.', conjugated: '끼' },
                    { prefix: '나) 작년에 입었던 셔츠가 꽉', suffix: '서 입을 수가 없어요. 아무래도 운동을 시작해야겠어요.', conjugated: '껴' }
                ]
            },
            {
                id: 2, baseWord: '생기다',
                sentences: [
                    { prefix: '가) 운동을 열심히 했더니 복근이', suffix: '.', conjugated: '생겼어요' },
                    { prefix: '나) 저는 성격이 좋고 얼굴이 잘', suffix: ' 남자와 사귀고 싶어요.', conjugated: '생긴' }
                ]
            },
            {
                id: 3, baseWord: '빠지다',
                sentences: [
                    { prefix: '가) 거기 119지요? 여기 한강 수영장인데 사람이 물에', suffix: '. 빨리 와 주세요.', conjugated: '빠졌어요' },
                    { prefix: '나) 친한 선배의 결혼식장에서 여자 친구를 처음 만났는데 보자마자 사랑에', suffix: '. 말도 잘 통하고 성격도 잘 맞아서 내년에 결혼하려고 해요.', conjugated: '빠졌어요' }
                ]
            }
        ];
        
        let selectedVocabEl = null;
        const wordBank = document.getElementById('word-bank');
        const vocabContainer = document.getElementById('vocab-questions-container');

        function renderVocabQuiz() {
            allVocabWords.forEach(word => {
                const wordEl = document.createElement('div');
                wordEl.textContent = word;
                wordEl.draggable = true;
                wordEl.dataset.baseWord = word;
                wordEl.id = `word-${word}`;
                wordEl.className = 'draggable bg-white p-2 px-4 rounded-md shadow-sm border border-gray-300 text-gray-700 font-medium';
                wordEl.addEventListener('dragstart', handleDragStart);
                wordEl.addEventListener('click', handleWordClick);
                wordBank.appendChild(wordEl);
            });

            allVocabQuestions.forEach((q, index) => {
                const questionEl = document.createElement('div');
                questionEl.className = 'p-3 bg-gray-50 rounded-lg text-center';
                questionEl.innerHTML = `
                    <div class="text-left">
                        <p class="text-lg mb-2">
                            <span class="font-semibold">${index + 1}.</span>
                            <span>${q.sentences[0].prefix}</span>
                            <div class="drop-zone inline-block bg-gray-200 border-2 border-dashed border-gray-400 rounded-md" data-question-id="${q.id}"></div>
                            <span>${q.sentences[0].suffix}</span>
                        </p>
                        <p class="text-lg">
                            <span class="font-semibold invisible">${index + 1}.</span>
                            <span>${q.sentences[1].prefix}</span>
                            <div class="drop-zone inline-block bg-gray-200 border-2 border-dashed border-gray-400 rounded-md" data-question-id="${q.id}"></div>
                            <span>${q.sentences[1].suffix}</span>
                        </p>
                    </div>
                    <div class="vocab-feedback" data-question-id="${q.id}"></div>
                `;
                vocabContainer.appendChild(questionEl);
            });

            vocabContainer.querySelectorAll('.drop-zone').forEach(zone => {
                zone.addEventListener('dragover', e => e.preventDefault());
                zone.addEventListener('dragenter', e => e.target.classList.add('drop-hover'));
                zone.addEventListener('dragleave', e => e.target.classList.remove('drop-hover'));
                zone.addEventListener('drop', handleDrop);
                zone.addEventListener('click', handleDropZoneClick);
            });
            adjustLayoutForWordBank();
        }

        function handleVocabAnswer(questionId, baseWord) {
            const questionData = allVocabQuestions.find(q => q.id == questionId);
            const dropZones = vocabContainer.querySelectorAll(`.drop-zone[data-question-id="${questionId}"]`);
            const feedbackEl = vocabContainer.querySelector(`.vocab-feedback[data-question-id="${questionId}"]`);
            const wordEl = document.getElementById(`word-${baseWord}`);

            if (questionData && questionData.baseWord === baseWord) {
                // CORRECT ANSWER
                feedbackEl.classList.remove('visible');
                dropZones.forEach((zone, index) => {
                    const conjugatedWord = questionData.sentences[index].conjugated;
                    zone.textContent = conjugatedWord;
                    zone.className = 'drop-zone inline-block bg-blue-100 border-2 border-solid border-blue-400 rounded-md text-blue-800 font-bold';
                    zone.style.pointerEvents = 'none'; // Disable further interaction
                });
                if (wordEl) {
                    wordEl.style.display = 'none'; // Hide word from bank
                }
            } else {
                // INCORRECT ANSWER
                feedbackEl.textContent = '틀렸습니다. 다시 시도해 보세요.';
                feedbackEl.classList.add('visible');
                dropZones.forEach(zone => zone.classList.add('drop-zone-incorrect'));

                setTimeout(() => {
                    feedbackEl.classList.remove('visible');
                    dropZones.forEach(zone => zone.classList.remove('drop-zone-incorrect'));
                }, 1500);
            }
        }
        
        function handleDragStart(e) {
            if (selectedVocabEl) selectedVocabEl.classList.remove('selected');
            selectedVocabEl = null;
            e.dataTransfer.setData('text/plain', e.target.dataset.baseWord);
            setTimeout(() => e.target.classList.add('dragging'), 0);
        }

        function handleWordClick(e) {
            const clickedWord = e.currentTarget;
            if (selectedVocabEl === clickedWord) {
                clickedWord.classList.remove('selected');
                selectedVocabEl = null;
            } else {
                if (selectedVocabEl) selectedVocabEl.classList.remove('selected');
                clickedWord.classList.add('selected');
                selectedVocabEl = clickedWord;
            }
        }
        
        function handleDrop(e) {
            e.preventDefault();
            const dropZone = e.target.closest('.drop-zone');
            if (!dropZone) return;
            dropZone.classList.remove('drop-hover');
            document.querySelectorAll('.dragging').forEach(d => d.classList.remove('dragging'));

            const baseWord = e.dataTransfer.getData('text');
            const questionId = dropZone.dataset.questionId;
            handleVocabAnswer(questionId, baseWord);
        }

        function handleDropZoneClick(e) {
            const dropZone = e.currentTarget;
            if (dropZone.style.pointerEvents === 'none') return;

            if (selectedVocabEl) {
                const questionId = dropZone.dataset.questionId;
                const baseWord = selectedVocabEl.dataset.baseWord;
                handleVocabAnswer(questionId, baseWord);
                selectedVocabEl.classList.remove('selected');
                selectedVocabEl = null;
            }
        }
        
        function adjustLayoutForWordBank() {
            const wordBankHeight = wordBank.offsetHeight;
            document.body.style.paddingBottom = `${wordBankHeight + 20}px`;
        }

        // --- 문법 문제 데이터 및 로직 ---
        const allGrammarQuestions = [
            { 
                id: 1, 
                parts: [
                    { text: '어제 ' },
                    { text: '먹은', isOption: true, correct: true, correction: '먹던', feedback: "과거에 시작되어 잠시 동안 계속된 행동을 회상할 때는 '-던'을 사용합니다. '먹고 있던'의 의미를 가집니다." },
                    { text: ' 케이크를 냉장고에 ' },
                    { text: '넣어 두었으니까', isOption: true, correct: false },
                    { text: ' 꺼내 ' },
                    { text: '드세요.', isOption: true, correct: false }
                ]
            },
            {
                id: 2,
                parts: [
                    { text: '' },
                    { text: '취직하려면', isOption: true, correct: false },
                    { text: ' 아직 ' },
                    { text: '멀어요.', isOption: true, correct: true, correction: '멀었어요.', feedback: "'아직 멀었다'는 관용적인 표현으로, 어떤 기준에 도달하려면 시간이 많이 필요함을 나타낼 때 과거형인 '멀었다'를 사용하는 것이 자연스럽습니다." },
                    { text: ' 졸업도 해야 하고 군대도 ' },
                    { text: '다녀와야 하니까요.', isOption: true, correct: false },
                ]
            },
            {
                id: 3,
                parts: [
                    { text: '개가 물에 빠진 ' },
                    { text: '주인을', isOption: true, correct: false },
                    { text: ' ' },
                    { text: '살았어요.', isOption: true, correct: true, correction: '살렸어요.', feedback: "주어가 목적어를 어떤 행동을 하게 만들 때는 사동사를 사용해야 합니다. 개가 주인을 살게 한 것이므로 '살다'의 사동사인 '살렸어요'가 맞습니다." },
                    { text: '' }
                ]
            }
        ];

        const grammarContainer = document.getElementById('grammar-questions-container');

        function renderGrammarQuiz() {
            allGrammarQuestions.forEach((q, index) => {
                const questionEl = document.createElement('div');
                questionEl.className = 'p-3 bg-gray-50 rounded-lg text-lg';
                questionEl.dataset.questionId = q.id;
                
                let sentenceHTML = `<span class="font-semibold">${index + 1}. </span>`;
                q.parts.forEach(part => {
                    if (part.isOption) {
                        sentenceHTML += `<span class="grammar-option" data-correct="${part.correct}" data-correction="${part.correction || ''}" data-feedback="${part.feedback || ''}">${part.text}</span>`;
                    } else {
                        sentenceHTML += `<span>${part.text}</span>`;
                    }
                });

                questionEl.innerHTML = `
                    <p>${sentenceHTML}</p>
                    <div class="feedback"></div>
                `;
                grammarContainer.appendChild(questionEl);
            });

            grammarContainer.querySelectorAll('.grammar-option').forEach(option => {
                option.addEventListener('click', handleGrammarOptionClick);
            });
        }

        function handleGrammarOptionClick(e) {
            const selectedOption = e.currentTarget;
            const questionEl = selectedOption.closest('[data-question-id]');
            const isCorrect = selectedOption.dataset.correct === 'true';
            const feedbackEl = questionEl.querySelector('.feedback');

            questionEl.querySelectorAll('.grammar-option').forEach(opt => {
                opt.classList.remove('grammar-incorrect');
            });

            if (isCorrect) {
                selectedOption.classList.add('grammar-correct');
                const correction = selectedOption.dataset.correction;
                const feedbackText = selectedOption.dataset.feedback;
                
                selectedOption.textContent = correction;
                feedbackEl.innerHTML = `<strong>정답! 피드백:</strong> ${feedbackText}`;
                feedbackEl.classList.add('visible');
                feedbackEl.style.borderColor = '#4ade80';

                questionEl.querySelectorAll('.grammar-option').forEach(opt => {
                    opt.style.pointerEvents = 'none';
                });
            } else {
                selectedOption.classList.add('grammar-incorrect');
                feedbackEl.innerHTML = '<strong>오답입니다.</strong> 다시 한번 생각해 보세요.';
                feedbackEl.classList.add('visible');
                feedbackEl.style.borderColor = '#f87171';
            }
        }
        
        function init() {
            renderVocabQuiz();
            renderGrammarQuiz();
            window.addEventListener('resize', adjustLayoutForWordBank);
        }

        init();
    </script>
</body>
</html>

